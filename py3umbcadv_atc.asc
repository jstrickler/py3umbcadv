= About this course


ifdef::instructor[]

-- Instructor Note --
====
This is an introduction to Python 3. It does not require any previous programming background. It covers all the basics, with a brief tour of the standard library, and has a short discussion of OOP in Python. Until the last chapter, it focuses on simple procedural scripting.

This first chapter is "About This Course", which covers logistics and other administrivia.

While this is not a slides-based course, some slides are provided, mostly where a graphic is needed. This guide will suggest where a particular slide is appropriate. 

Each topic has several bullet points that summarize the topic. These function similarly to slides in many courses. 

This course is taught with live code samples.  PyCharm is recommended, but any editor can be used. The labs are IDE-neutral.

You can write code on-the-fly or use the examples that are in the book, and which have soft copies in the EXAMPLES folder.

Students are strongly encouraged to ask about their own data and requirements. It is a very successful class when one or more students writes scripts to take back and implement in real life. 

On the first day, after going through the course timeline, ask for any extra topics that weren't mentioned, to have a little time to prep for them. The topics can be covered on the last day.

This chapter is about the logistics of the course. After introducing yourself and having the students introduce themselves, you can run through this chapter, adding in the class hours, where the restrooms are, and other pertinent details. 

This lets the students know what they are in for. 

After you have gone over the course timeline, this is a good  time to ask if there are any extra topics that students would like to cover. This gives you plenty of time to prepare for the extra topics. It's a good idea to ask again on day 2 or 3, once the students are a bit more comfortable with Python.

====

endif::instructor[]

<<<

== Welcome!
* We're glad you're here
* Class has hands-on labs for nearly every chapter
* Please make a name tent

*Instructor name:* 
{empty} +
{empty} +
*Instructor e-mail:*  
{empty} +
{empty} +

image::{imagedir}/tim.jpg[caption="Tim the Enchanter"]

[big]*Have Fun!* 


ifdef::instructor[]
-- Instructor Note --
====

****
Thanks for using my material. Please send any feedback to:
mailto:jstrickler@gmail.com[]

It seems there's always one more typo, so I'm glad to hear about those. If you have general suggestions on missing, misrepresented, or underrepresented topics, or order of presentation, etc., I'm open to that as well. 
****

[small]_PDF Document generated on {localdate} at {localtime}_

====
endif::instructor[]

<<<

== Classroom etiquette
* Noisemakers off
* No phone conversations
* Come and go quietly during class.

Please turn off cell phone ringers and other noisemakers.

If you need to have a phone conversation, please leave the classroom.

We're all adults here; feel free to leave the classroom if you need to use the restroom, make a phone call, etc. You don't have to wait for a lab or break, but please try not to disturb others.

IMPORTANT: Please do not bring killer rabbits to class. They might maim, dismember, or otherwise disturb your fellow students.

ifdef::instructor[]
-- Instructor Note --
====
I hate to even have this page, but I have had students with loud ringers, students talking on the phone, etc.
====
endif::instructor[]

<<<

== Course Outline

=== Day {counter:day}
python refresher
type-hinting
intermediate classes

=== Day {counter:day}
object oriented design
generators and other iterables
functional tools

=== Day {counter:day}
idiomatic data handling
advanced io handling
container classes

=== Day {counter:day}
metaprogramming
distributed computing

=== Day {counter:day}
multiprogramming
async programming

NOTE: The actual schedule varies with circumstances. The last day may include _ad hoc_ topics requested by students

ifdef::instructor[]
-- Instructor Note --
====
====
endif::instructor[]

<<<

== Student files

You will need to load some files onto your computer. The files are in a compressed archive. When you extract them onto your computer, they will all be extracted into a directory named *{class_slug}*.

What's in the files?

*{class_slug}* contains data and other files needed for the exercises +
*{class_slug}/EXAMPLES* contains the examples from the course manuals. +
*{class_slug}/ANSWERS* contains sample answers to the labs. +

[WARNING]
The student files do not contain Python itself. It will need to be installed separately. This has probably already been done for you.

ifdef::instructor[]
-- Instructor Note --
====
There may be some extra examples in the EXAMPLES folder that are not referenced in the course manual. 

ifdef::itcourseware[]
If not provided in class, please contact support@itcourseware.com for a link to download the student files.
endif::itcourseware[]

====
endif::instructor[]

<<<

== Extracting the student files

[float]
=== Windows

Open the file *{class_slug}.zip*. Extract all files to your desktop. This will create the folder *{class_slug}*.


[float]
=== Non-Windows (includes Linux, OS X, etc)

Copy or download *{class_slug}.tgz* to your home directory. In your home directory, type

[source, subs="attributes"]
----
tar xzvf {class_slug}.tgz
----

This will create the *{class_slug}* directory under your home directory.

ifdef::instructor[]
-- Instructor Note --

[subs="attributes"]
====
All examples from the course manual are provided in the EXAMPLES subdirectory. Encourage students to load the examples and play around with them. 

In the book, the Example heading is followed by the script name, then the code, then the output

The line preceding the output,  with the file name, shows how the script was invoked, including any arguments.

One tricky issue in Windows is that when you double-click on coursename.zip, and say you want to *Extract All*, the extractor by default creates a folder with the same name as the zip file (minus ".zip"). The zip file already contains that folder, so students end up with C:\users\bob\Desktop\coursename\coursename\...+

To avoid this, make sure the extraction target is *Desktop* itself, not *Desktop\coursename*.

Slide: *_Extracting files on Windows_*

====
endif::instructor[]

<<<

== Examples
Nearly all examples from the course manual are provided in the EXAMPLES subdirectory.

It will look like this:

[big]*Example*

:examplebase: cmd_line_args
:examplefile: {examplebase}.py

*{examplefile}*

ifdef::highlight[]
[source, python]
endif::highlight[]
----
include::{exampledir}{examplefile}[]
----
include::{exampledir}callouts/{examplebase}.callouts[]

*_{examplefile} Fred_*

capture::[cd {exampledir} && {python3exe} {exampledir}{examplefile} Fred]

<<<

== Lab Exercises
* Relax – the labs are not quizzes
* Feel free to modify labs
* Ask the instructor for help
* Work on your own scripts or data
* Answers are in {class_slug}/ANSWERS


ifdef::instructor[]
-- Instructor Note --
====
Reassure the students that they _can_ relax – the labs are not quizzes

I encourage the students to modify labs any way they want, but suggest that they still fit the current chapter's topic. 

Of course students should be encouraged to ask for help. I always explain that 

1. It's my job to help them. 
2. I get paid to do it. 
3. I enjoy doing it. 

Students can also work on their own scripts or use their data. This is the best possible situation, since it makes the coding real for them. It's not always easy, or even possible to arrange.

Answers to all exercises are in the ANSWERS folder. Sometimes there is one or more alternate versions of the answer that illustrates a different approach. (Even though in Python there should be only one way to do it :-) ).
====
endif::instructor[]

== Appendices

* Appendix A: Python Bibliography
// others T/B/D

// vim: set syntax=asciidoc:
 
